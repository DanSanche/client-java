/**
 * Grafeas API
 * An API to insert and retrieve annotations on cloud artifacts.
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.grafeas.v1alpha1.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;


/**
 * An attestation wrapper with a PGP-compatible signature. This message only supports ATTACHED signatures, where the payload that is signed is included alongside the signature itself in the same file.
 */
@ApiModel(description = "An attestation wrapper with a PGP-compatible signature. This message only supports ATTACHED signatures, where the payload that is signed is included alongside the signature itself in the same file.")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-10-10T18:21:51.795-04:00")
public class PgpSignedAttestation   {
  @SerializedName("signature")
  private String signature = null;

  /**
   * Type (e.g. schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (e.g. by validating a JSON schema).
   */
  public enum ContentTypeEnum {
    @SerializedName("UNSET")
    UNSET("UNSET"),
    
    @SerializedName("SIMPLE_SIGNING_JSON")
    SIMPLE_SIGNING_JSON("SIMPLE_SIGNING_JSON");

    private String value;

    ContentTypeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("contentType")
  private ContentTypeEnum contentType = null;

  @SerializedName("pgpKeyId")
  private String pgpKeyId = null;

  public PgpSignedAttestation signature(String signature) {
    this.signature = signature;
    return this;
  }

   /**
   * The raw content of the signature, as output by gpg or equivalent.  Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.
   * @return signature
  **/
  @ApiModelProperty(example = "null", value = "The raw content of the signature, as output by gpg or equivalent.  Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.")
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }

  public PgpSignedAttestation contentType(ContentTypeEnum contentType) {
    this.contentType = contentType;
    return this;
  }

   /**
   * Type (e.g. schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (e.g. by validating a JSON schema).
   * @return contentType
  **/
  @ApiModelProperty(example = "null", value = "Type (e.g. schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (e.g. by validating a JSON schema).")
  public ContentTypeEnum getContentType() {
    return contentType;
  }

  public void setContentType(ContentTypeEnum contentType) {
    this.contentType = contentType;
  }

  public PgpSignedAttestation pgpKeyId(String pgpKeyId) {
    this.pgpKeyId = pgpKeyId;
    return this;
  }

   /**
   * The ID of the key, as output by `gpg --list-keys`.  This should be 8 hexidecimal digits, capitalized.  e.g. $ gpg --list-keys pub 2048R/A663AEEA 2017-08-01 ui Fake Name <example-attesting-user@google.com> In the above example, the `key_id` is \"A663AEEA\". Note that in practice this ID is the last 64 bits of the key fingerprint.
   * @return pgpKeyId
  **/
  @ApiModelProperty(example = "null", value = "The ID of the key, as output by `gpg --list-keys`.  This should be 8 hexidecimal digits, capitalized.  e.g. $ gpg --list-keys pub 2048R/A663AEEA 2017-08-01 ui Fake Name <example-attesting-user@google.com> In the above example, the `key_id` is \"A663AEEA\". Note that in practice this ID is the last 64 bits of the key fingerprint.")
  public String getPgpKeyId() {
    return pgpKeyId;
  }

  public void setPgpKeyId(String pgpKeyId) {
    this.pgpKeyId = pgpKeyId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PgpSignedAttestation pgpSignedAttestation = (PgpSignedAttestation) o;
    return Objects.equals(this.signature, pgpSignedAttestation.signature) &&
        Objects.equals(this.contentType, pgpSignedAttestation.contentType) &&
        Objects.equals(this.pgpKeyId, pgpSignedAttestation.pgpKeyId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(signature, contentType, pgpKeyId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PgpSignedAttestation {\n");
    
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    pgpKeyId: ").append(toIndentedString(pgpKeyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

